require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

describe Person do
  describe "ensuring correct number of mindapples" do
    it "should assign five mindapples if it has none" do
      person = Person.new
      person.ensure_corrent_number_of_mindapples
      person.should have(5).mindapples
    end

    it "should assign only up to five mindapples if it already has some" do
      person = Person.new
      3.times { person.mindapples.build }
      person.ensure_corrent_number_of_mindapples
      person.should have(5).mindapples
    end

    it "should delete enough mindapples to have 5 left if it has more" do
      person = Person.new
      7.times { |i| person.mindapples.build(:created_at => i.days.ago, :suggestion => i.to_s) }
      person.ensure_corrent_number_of_mindapples
      person.should have(5).mindapples
    end
  end

  describe "setting login" do
    it "should set the login if it currently is empty" do
      person = Factory.build(:person, :login => "")
      person.protected_login = 'gandy'
      person.save!
      person.login.should == 'gandy'
    end

    it "should set the login if it current has no value" do
      person = Factory.build(:person, :login => nil)
      person.protected_login = 'gandy'
      person.save!
      person.login.should == 'gandy'
    end

    it "should set the login if it's value was autogenerated " do
      person = Factory.build(:person,
                             :login => "#{Person::AUTOGEN_LOGIN_PREFIX}abcdefgh",
                             :page_code => 'abcdefgh')
      person.protected_login = 'gandy'
      person.save!
      person.login.should == 'gandy'
    end

    it "should set not change the login if it currently has a value" do
      person = Factory.build(:person, :login => "dangermouse")
      person.protected_login = 'gandy'
      person.save!
      person.login.should == 'dangermouse'
    end

    it "should be protected from mass assign" do
      person = Factory.build(:person, :login => 'gandy')
      person.update_attributes(:login => 'dangermouse')
      person.login.should == 'gandy'
    end
  end

  describe "setting page_code" do
    it "should be protected from mass assign" do
      person = Factory.build(:person, :page_code => 'abcdefgh')
      person.update_attributes(:page_code => 'dangermouse')
      person.page_code.should == 'abcdefgh'
    end
  end

  describe "to_param" do
    it "should have its login as param if it has set one" do
      Factory.create(:person, :login => 'bert').to_param.should == 'bert'
    end

    it "should have its page_code as param if its login was autogenerated" do
      person = Factory.create(:person,
                              :login => '%spagecode' % Person::AUTOGEN_LOGIN_PREFIX,
                              :page_code => 'pagecode')
      person.to_param.should == '_pagecode'
    end
  end

  describe "finding by param" do
    before do
      @person = Factory.create(:person,
                               :login => 'frooble',
                               :page_code => 'wibble')
    end

    it "should find by login if the id does not start with an underscore" do
      Person.find_by_param('frooble').should == @person
    end

    it "should not find by login if the id starts with an underscore" do
      Person.find_by_param('_frooble').should be_nil
    end

    it "should find by page code if the id starts with an underscore" do
      Person.find_by_param('_wibble').should == @person
    end

    it "should not find by page code if the id does not start with an underscore" do
      Person.find_by_param('wibble').should be_nil
    end
  end

  it "should return its param value when converted to string" do
    person = Factory.create(:person)
    person.to_s.should == person.to_param
  end

  it "should not be valid if it does not have a page code" do
    Factory.build(:person, :page_code => nil).should_not be_valid
  end

  it "should not be valid if its login starts with an underscore" do
    Factory.build(:person, :login => '_starts_with_underscore').should_not be_valid
  end

  describe "welcome email" do
    it "should be sent when created with an email address" do
      person = Factory.build(:person, :email => 'andy@example.com')
      PersonMailer.should_receive(:deliver_welcome_email).with(person)
      person.save!
    end

    it "should not be sent when created without an email address" do
      person = Factory.build(:person)
      PersonMailer.should_not_receive(:deliver_welcome_email)
      person.save!
    end

    it "should be sent when an email address is set" do
      person = Factory.create(:person)
      PersonMailer.should_receive(:deliver_welcome_email).with(person)
      person.update_attributes(:email => 'andy@example.com')
    end

    it "should not be sent when no email address is set" do
      person = Factory.create(:person)
      PersonMailer.should_not_receive(:deliver_welcome_email)
      person.update_attributes(:email => '')
    end

    it "should not be sent if a welcome email was already sent" do
      person = Factory.create(:person, :has_received_welcome_mail => true)
      PersonMailer.should_not_receive(:deliver_welcome_email)
      person.update_attributes(:email => 'aaa@example.com')
    end

    it "should not be sent if the email address is unset" do
      person = Factory.create(:person, :email => 'andy@example.com')
      PersonMailer.should_not_receive(:deliver_welcome_email)
      person.update_attributes(:email => '')
    end

    it "should only be sent once" do
      person = Factory.create(:person, :email => 'andy@example.com')
      PersonMailer.should_not_receive(:deliver_welcome_email)
      person.update_attributes(:email => 'something_else@example.com')
    end

    it "should not be sent if the person has invalid fields" do
      person = Factory.create(:person)
      PersonMailer.should_not_receive(:deliver_welcome_email)
      person.update_attributes(:email => 'andy@example.com',
                               :password => 'bla1234',
                               :password_confirmation => 'foo1234')
    end
  end
end
