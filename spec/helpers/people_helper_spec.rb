require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

include PeopleHelper

describe PeopleHelper do
  
  describe "populate resource" do
    it "populated unsaved resource object with data from params" do
      resource = Person.new
      params[:person] = {:email => 'mind@apples.com',
                         :login => 'calm_mind',
                         :some_value => 'artifical'}

      populate_resource(resource)

      resource.email.should == 'mind@apples.com'
      resource.login.should == 'calm_mind'
      resource.some_value.should == 'artifical'
    end

    it "doesn't populate empty login'" do
      resource = Person.new
      params[:person] = {:email => 'mind@apples.com',
                         :login => '',
                         :some_value => 'artifical'}

      populate_resource(resource)
      resource.login.should_not == 'calm_mind'
    end
  end

  describe "person_link" do
    it "return proper person name" do
      person = Factory(:person, :login => "apples_mind", :name => "Mind apples user")
      mindapple = Factory(:mindapple,:person => person)
      person_link(mindapple).should == "<a href=\"/person/apples_mind\">Mind apples user</a>"
    end
    
    it "return login name if there is no user name" do
      person = Factory(:person, :login => "apples_mind", :name => "")
      mindapple = Factory(:mindapple,:person => person)
      person_link(mindapple).should == "<a href=\"/person/apples_mind\">apples_mind</a>"
    end

    it "return anonym for autogenerated user" do
      person = Factory(:person, :login => "autogen_asadsda", :name => "", :page_code => "asadsda")
      mindapple = Factory(:mindapple,:person => person)
      person_link(mindapple).should == "anonymous"
    end
  end
  
  describe "suggestion" do
    before(:each) do
      session[:suggestions] = {'0' => {"suggestion" => 'riding on the wolf'},
                               '1' => {"suggestion" =>'swiming with sharks'},
                               '2' => {"suggestion" =>'wrestling with the bears'},
                               '3' => {"suggestion" =>''},
                               '4' => {"suggestion" =>'feading lions'}
                               }
    end

    it "return suggestion from session" do
      suggestion(1).should == 'swiming with sharks'
    end

    it "clear session with suggestions" do
      suggestion(4).should == 'feading lions'
      session[:suggestions].should == nil
    end

  end

end
